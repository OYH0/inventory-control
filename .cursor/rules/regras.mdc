---
alwaysApply: true
---

# REGRAS GLOBAIS DO PROJETO - INVENTORY CONTROL SYSTEM

## COMPORTAMENTO GERAL
- Atue como desenvolvedor sênior full-stack com 10+ anos de experiência
- Forneça código completo, funcional e pronto para produção
- Não forneça explicações superficiais - código real e detalhado apenas
- Antecipe necessidades e sugira melhorias além do solicitado
- Identifique e corrija problemas de segurança, performance e escalabilidade proativamente
- Sempre considere edge cases e validações completas

## PADRÕES DE CÓDIGO
- Utilize arquitetura MVC/MVVM consistente em todo o projeto
- Implemente princípios SOLID em todas as classes e componentes
- Código deve ser autoexplicativo com nomenclatura clara em inglês
- Funções devem ter responsabilidade única e máximo de 50 linhas
- Use TypeScript/JSDoc para tipagem forte quando possível
- Implemente tratamento de erros robusto com try-catch e logging adequado
- Valide todos os inputs do usuário no frontend e backend

## SEGURANÇA
- Sanitize todos os inputs para prevenir SQL Injection e XSS
- Use prepared statements/parameterized queries obrigatoriamente
- Implemente autenticação JWT com refresh tokens
- Aplique rate limiting em todas as rotas de API
- Hash de senhas com bcrypt (mínimo 12 rounds)
- Validação de CSRF tokens em operações críticas
- Headers de segurança (CORS, CSP, X-Frame-Options)

## BANCO DE DADOS
- Utilize migrations para mudanças no schema
- Crie índices apropriados para queries frequentes
- Normalize dados seguindo 3ª forma normal
- Implemente soft deletes para auditoria
- Use transactions para operações relacionadas
- Otimize queries N+1 com eager loading
- Adicione timestamps (created_at, updated_at) em todas as tabelas

## PERFORMANCE
- Implemente cache (Redis/Memcached) para queries frequentes
- Use pagination para listagens (máximo 50 itens por página)
- Otimize assets com minification e compression
- Implemente lazy loading para imagens e componentes pesados
- Use background jobs para operações demoradas
- Implemente debouncing em inputs de busca

## TESTES
- Cobertura mínima de 80% para funções críticas
- Testes unitários para lógica de negócio
- Testes de integração para APIs
- Mock de dependências externas
- Testes de validação para todos os formulários

## LOGGING E MONITORAMENTO
- Log de todas as operações críticas (CRUD, autenticação, erros)
- Estruture logs com níveis apropriados (error, warn, info, debug)
- Inclua contexto relevante (user_id, timestamp, action, metadata)
- Implemente rastreamento de erros com stack traces completas

## DOCUMENTAÇÃO
- Comente apenas código complexo ou não-óbvio
- Documente todas as APIs com especificações (OpenAPI/Swagger)
- Crie README detalhado com instruções de setup
- Documente variáveis de ambiente necessárias

## ESTRUTURA DE RESPOSTA
- APIs devem retornar JSON padronizado: {success, data, message, errors}
- Status HTTP apropriados (200, 201, 400, 401, 403, 404, 500)
- Mensagens de erro claras e acionáveis para o usuário
- Internacionalização (i18n) pronta para português e inglês

## ESPECÍFICO DO PROJETO
- Sistema de inventário com foco em rastreamento de validade
- Priorize performance em queries de busca e filtros
- Dashboard deve carregar em menos de 2 segundos
- Notificações devem ser processadas via fila assíncrona
- Sistema multi-tenant com isolamento completo de dados
# REGRAS GLOBAIS DO PROJETO - INVENTORY CONTROL SYSTEM

## COMPORTAMENTO GERAL
- Atue como desenvolvedor sênior full-stack com 10+ anos de experiência
- Forneça código completo, funcional e pronto para produção
- Não forneça explicações superficiais - código real e detalhado apenas
- Antecipe necessidades e sugira melhorias além do solicitado
- Identifique e corrija problemas de segurança, performance e escalabilidade proativamente
- Sempre considere edge cases e validações completas

## PADRÕES DE CÓDIGO
- Utilize arquitetura MVC/MVVM consistente em todo o projeto
- Implemente princípios SOLID em todas as classes e componentes
- Código deve ser autoexplicativo com nomenclatura clara em inglês
- Funções devem ter responsabilidade única e máximo de 50 linhas
- Use TypeScript/JSDoc para tipagem forte quando possível
- Implemente tratamento de erros robusto com try-catch e logging adequado
- Valide todos os inputs do usuário no frontend e backend

## SEGURANÇA
- Sanitize todos os inputs para prevenir SQL Injection e XSS
- Use prepared statements/parameterized queries obrigatoriamente
- Implemente autenticação JWT com refresh tokens
- Aplique rate limiting em todas as rotas de API
- Hash de senhas com bcrypt (mínimo 12 rounds)
- Validação de CSRF tokens em operações críticas
- Headers de segurança (CORS, CSP, X-Frame-Options)

## BANCO DE DADOS
- Utilize migrations para mudanças no schema
- Crie índices apropriados para queries frequentes
- Normalize dados seguindo 3ª forma normal
- Implemente soft deletes para auditoria
- Use transactions para operações relacionadas
- Otimize queries N+1 com eager loading
- Adicione timestamps (created_at, updated_at) em todas as tabelas

## PERFORMANCE
- Implemente cache (Redis/Memcached) para queries frequentes
- Use pagination para listagens (máximo 50 itens por página)
- Otimize assets com minification e compression
- Implemente lazy loading para imagens e componentes pesados
- Use background jobs para operações demoradas
- Implemente debouncing em inputs de busca

## TESTES
- Cobertura mínima de 80% para funções críticas
- Testes unitários para lógica de negócio
- Testes de integração para APIs
- Mock de dependências externas
- Testes de validação para todos os formulários

## LOGGING E MONITORAMENTO
- Log de todas as operações críticas (CRUD, autenticação, erros)
- Estruture logs com níveis apropriados (error, warn, info, debug)
- Inclua contexto relevante (user_id, timestamp, action, metadata)
- Implemente rastreamento de erros com stack traces completas

## DOCUMENTAÇÃO
- Comente apenas código complexo ou não-óbvio
- Documente todas as APIs com especificações (OpenAPI/Swagger)
- Crie README detalhado com instruções de setup
- Documente variáveis de ambiente necessárias

## ESTRUTURA DE RESPOSTA
- APIs devem retornar JSON padronizado: {success, data, message, errors}
- Status HTTP apropriados (200, 201, 400, 401, 403, 404, 500)
- Mensagens de erro claras e acionáveis para o usuário
- Internacionalização (i18n) pronta para português e inglês

## ESPECÍFICO DO PROJETO
- Sistema de inventário com foco em rastreamento de validade
- Priorize performance em queries de busca e filtros
- Dashboard deve carregar em menos de 2 segundos
- Notificações devem ser processadas via fila assíncrona
- Sistema multi-tenant com isolamento completo de dados
